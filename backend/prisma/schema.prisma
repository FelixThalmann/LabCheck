// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Raummodell für bessere Organisation und Skalierbarkeit
model Room {
  id          String   @id @default(cuid())
  name        String   @unique 
  description String? 
  capacity    Int      @default(20) 
  isOpen      Boolean  @default(true) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  maxCapacity Int      @default(20) 

  sensors     Sensor[]
  dayPredictions  DayPrediction[]
  weekPredictions WeekPrediction[]
  occupancyHistory RoomOccupancyHistory[]
  @@map("rooms")
}

// Raumbelegungshistorie - verfolgt jede Kapazitätsänderung über Zeit
model RoomOccupancyHistory {
  id                String           @id @default(cuid())
  roomId            String
  occupancy         Int              // Aktuelle Belegung nach dem Event
  previousOccupancy Int?             // Belegung vor dem Event (null für ersten Eintrag)
  eventType         PassageDirection // IN oder OUT Event das die Änderung verursacht hat
  eventTimestamp    DateTime         // Wann das ursprüngliche Event stattfand
  createdAt         DateTime         @default(now()) // Wann dieser History-Eintrag erstellt wurde

  // Beziehung zum Raum
  room              Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, eventTimestamp])
  @@map("room_occupancy_history")
}

model Sensor {
  id        String   @id @default(cuid())
  esp32Id   String   @unique // Eindeutige ID des ESP32-Boards
  location  String?  // Spezifische Position innerhalb des Raums, z.B. "Tür Nord", "Eingang Ost"
  sensorType String  @default("multi") // "door", "motion", "passage", "light_barrier", "multi"
  isActive  Boolean  @default(true) // Ob der Sensor aktiv ist
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Beziehung zum Raum
  room   Room?   @relation(fields: [roomId], references: [id])
  roomId String?

  // Bestehende Event-Beziehungen
  doorEvents         DoorEvent[]
  passageEvents      PassageEvent[]

  @@map("sensors")
}

model DoorEvent {
  id               String   @id @default(cuid())
  eventTimestamp   DateTime // Zeitstempel vom Sensor oder Backend-Eingang
  doorIsOpen       Boolean  // true wenn Tür offen, false wenn geschlossen
  createdAt        DateTime @default(now()) // Backend Zeitstempel der Erfassung

  sensor   Sensor @relation(fields: [sensorId], references: [id])
  sensorId String

  @@map("door_events")
}

enum PassageDirection {
  IN
  OUT
}

// PassageEvent: Repräsentiert die Messwerte des ToF-Sensors (Time-of-Flight) für Personenbewegungen (Ein-/Austritt)
model PassageEvent {
  id               String           @id @default(cuid())
  eventTimestamp   DateTime         // Zeitstempel des ToF-Sensor-Ereignisses
  direction        PassageDirection // Rein oder Raus (vom ToF-Sensor erkannt)
  createdAt        DateTime         @default(now())
  sensor   Sensor @relation(fields: [sensorId], references: [id])
  sensorId String

  @@map("passage_events")
}



// Tagesvorhersagen - jetzt raumspezifisch
model DayPrediction {
  id          String   @id @default(cuid())
  time        String   // "8 AM", "10 AM", "12 PM", "2 PM", "4 PM", "6 PM"
  occupancy   Int      @default(0)
  color       String   // "green", "yellow", "red"
  date        DateTime @db.Date // Datum für das die Vorhersage gilt
  confidence  Float?   @default(0.0) // Konfidenz der Vorhersage (0.0 - 1.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Beziehung zum Raum
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  @@unique([roomId, date, time])
  @@map("day_predictions")
}

// Wochenvorhersagen - jetzt raumspezifisch
model WeekPrediction {
  id          String   @id @default(cuid())
  day         String   // "Mon", "Tue", "Wed", "Thu", "Fri"
  occupancy   Int      @default(0)
  color       String   // "green", "yellow", "red"
  weekStart   DateTime @db.Date // Montag der Woche (für Eindeutigkeit)
  confidence  Float?   @default(0.0) // Konfidenz der Vorhersage (0.0 - 1.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Beziehung zum Raum
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  @@unique([roomId, weekStart, day])
  @@map("week_predictions")
}

model OccupancyEvent {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  personCount Int
  isDoorOpen  Boolean
}
